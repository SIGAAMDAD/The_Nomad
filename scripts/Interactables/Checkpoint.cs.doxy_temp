using Godot;
using Renown.World;

/*
===================================================================================

Checkpoint

class implementation for a Meliora

===================================================================================
*/

public partial class Checkpoint : InteractionItem {
	[Export]
	private string Title;
	[Export]
	private WorldArea Location;

	private AnimatedSprite2D Animations;
	private AnimatedSprite2D ActivateAnimation;
	private AudioStreamPlayer2D AudioChannel;

	private Callable Callback;
	private RichTextLabel Text;

	private bool Activated;

	/*
	================
	GetLocation
	===============
	*/
	public WorldArea GetLocation() {
		return Location;
	}

	/*
	================
	GetActivated
	===============
	*/
	public bool GetActivated() {
		return Activated;
	}

	/*
	================
	GetTitle
	===============
	*/
	public string GetTitle() {
		return Title;
	}

	/*
	================
	GetInteractionType
	===============
	*/
	public override InteractionType GetInteractionType() {
		return InteractionType.Checkpoint;
	}

	/*
	================
	Activate
	===============
	*/
	public void Activate( Player player ) {
		if ( !Activated ) {
			Activated = true;
			Animations.Hide();
			ActivateAnimation.Show();
			ActivateAnimation.Play( "default" );
		}
		player.BeginInteraction( this );
		player.Disconnect( Player.SignalName.Interaction, Callback );
		Text.Hide();
	}

	/*
	================
	Save
	===============
	*/
	public void Save() {
		using ( var writer = new SaveSystem.SaveSectionWriter( GetPath() ) ) {
			writer.SaveBool( nameof( Activated ), Activated );
		}
	}

	/*
	================
	Load
	===============
	*/
	public void Load() {
		SaveSystem.SaveSectionReader reader = ArchiveSystem.GetSection( GetPath() );

		// save file compatibility
		if ( reader == null ) {
			return;
		}

		Activated = reader.LoadBoolean( "Activated" );
		if ( Activated ) {
			Animations.Play( "activated" );
		}
	}

	/*
	================
	OnInteractionAreaBody2DEntered
	===============
	*/
	protected override void OnInteractionAreaBody2DEntered( Rid bodyRID, Node2D body, int bodyShapeIndex, int localShapeIndex ) {
		if ( body is Player player && player != null ) {
			Callback = Callable.From( () => Activate( player ) );
			Text.Show();
			player.Connect( Player.SignalName.Interaction, Callback );
		}
	}

	/*
	================
	OnInteractionAreaBody2DExited
	===============
	*/
	protected override void OnInteractionAreaBody2DExited( Rid bodyRID, Node2D body, int bodyShapeIndex, int localShapeIndex ) {
		if ( body is Player player && player != null ) {
			Text.Hide();
			if ( player.IsConnected( Player.SignalName.Interaction, Callback ) ) {
				player.Disconnect( Player.SignalName.Interaction, Callback );
			}
			player.EndInteraction();
		}
	}

	/*
	================
	OnActivateAnimationFinished
	===============
	*/
	private void OnActivateAnimationFinished() {
		ActivateAnimation.Hide();
		RemoveChild( ActivateAnimation );
		ActivateAnimation.QueueFree();
		Animations.Play( "activated" );
		Animations.Show();
		Text.Hide();
	}

	/*
	================
	_Ready

	godot initialization override
	===============
	*/
	public override void _Ready() {
		base._Ready();

		VisibleOnScreenEnabler2D enabler;

		Activated = false;
		ProcessMode = ProcessModeEnum.Pausable;

		Animations = GetNode<AnimatedSprite2D>( "AnimatedSprite2D" );

		enabler = GetNode<VisibleOnScreenEnabler2D>( "VisibleOnScreenEnabler2D" );
		enabler.Connect( VisibleOnScreenEnabler2D.SignalName.ScreenEntered, Callable.From( Animations.Show ) );
		enabler.Connect( VisibleOnScreenEnabler2D.SignalName.ScreenExited, Callable.From( Animations.Hide ) );

		ActivateAnimation = GetNode<AnimatedSprite2D>( "ActivateAnimation" );
		ActivateAnimation.Connect( AnimatedSprite2D.SignalName.AnimationFinished, Callable.From( OnActivateAnimationFinished ) );

		Text = GetNode<RichTextLabel>( "RichTextLabel" );
		LevelData.Instance.ThisPlayer.InputMappingContextChanged += () => Text.ParseBbcode( AccessibilityManager.GetBindString( LevelData.Instance.ThisPlayer.InteractAction ) );

		Connect( SignalName.BodyShapeEntered, Callable.From<Rid, Node2D, int, int>( OnInteractionAreaBody2DEntered ) );
		Connect( SignalName.BodyShapeExited, Callable.From<Rid, Node2D, int, int>( OnInteractionAreaBody2DExited ) );

		if ( !IsInGroup( "Archive" ) ) {
			AddToGroup( "Archive" );
		}
		if ( ArchiveSystem.Instance.IsLoaded() ) {
			Load();
		}
	}
};
