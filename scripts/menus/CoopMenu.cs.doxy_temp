using Godot;
using System.Linq;
using Multiplayer;

/*
===================================================================================

CoopMenu

===================================================================================
*/

public partial class CoopMenu : Control {
	private OptionButton MapList;
	private OptionButton GameModeList;

	private PackedScene LoadedWorld;
	private System.Threading.Thread LoadThread;

	private AudioStreamPlayer UIChannel;

	private bool Loaded = false;

	private void OnMapSelectionChanged( int nSelected ) {
		MultiplayerMapManager.MapData data = MultiplayerMapManager.MapCache.Values.ElementAt( nSelected );

		GameModeList.Clear();
		if ( data.ModeBloodbath ) {
			GameModeList.AddItem( Mode.ModeNames[ Mode.GameMode.Bloodbath ], (int)Mode.GameMode.Bloodbath );
		}
		if ( data.ModeCaptureTheFlag ) {
			GameModeList.AddItem( Mode.ModeNames[ Mode.GameMode.CaptureTheFlag ], (int)Mode.GameMode.CaptureTheFlag );
		}
		if ( data.ModeKingOfTheHill ) {
			GameModeList.AddItem( Mode.ModeNames[ Mode.GameMode.KingOfTheHill ], (int)Mode.GameMode.KingOfTheHill );
		}
		if ( data.ModeDuel ) {
			GameModeList.AddItem( Mode.ModeNames[ Mode.GameMode.Duel ], (int)Mode.GameMode.Duel );
		}
		if ( data.ModeExtraction ) {
			GameModeList.AddItem( Mode.ModeNames[ Mode.GameMode.Extraction ], (int)Mode.GameMode.Extraction );
		}
		if ( data.ModeBountyHunt ) {
			GameModeList.AddItem( Mode.ModeNames[ Mode.GameMode.BountyHunt ], (int)Mode.GameMode.BountyHunt );
		}
		if ( data.ModeHoldTheLine ) {
			GameModeList.AddItem( Mode.ModeNames[ Mode.GameMode.HoldTheLine ], (int)Mode.GameMode.HoldTheLine );
		}
		GameModeList.Selected = 0;
	}

	private void OnTransitionFinished() {
		Hide();

		Console.PrintLine( "Loading game..." );

		string modeName;
		switch ( (Mode.GameMode)GameModeList.GetItemId( GameModeList.Selected ) ) {
			case Mode.GameMode.Duel:
				modeName = "duel";
				break;
			case Mode.GameMode.Bloodbath:
				modeName = "ffa";
				break;
			case Mode.GameMode.CaptureTheFlag:
				modeName = "ctf";
				break;
			case Mode.GameMode.KingOfTheHill:
				modeName = "koth";
				break;
			case Mode.GameMode.Extraction:
				modeName = "extraction";
				break;
			case Mode.GameMode.BountyHunt:
				modeName = "bh";
				break;
			default:
				modeName = "";
				break;
		}

		string mapName = "res://levels/" + MultiplayerMapManager.MapCache.Values.ElementAt( MapList.Selected ).FileName + "_" + modeName + "_2p.tscn";
		GetNode<LoadingScreen>( "/root/LoadingScreen" ).FadeIn( mapName );
	}
	private void OnStartButtonPressed() {
		if ( Loaded ) {
			return;
		}
		Loaded = true;

		UIAudioManager.OnActivate();

		GetNode<CanvasLayer>( "/root/TransitionScreen" ).Connect( "transition_finished", Callable.From( OnTransitionFinished ) );
		GetNode<CanvasLayer>( "/root/TransitionScreen" ).Call( "transition" );
		/*
		TODO: split screen with online
		string name = LobbyName.Text;
		if ( LobbyName.Text.Length == 0 ) {
			string username = SteamManager.GetSteamName();
			if ( username[ username.Length - 1 ] == 's' ) {
				name = string.Format( "{0}' Lobby", username );
			} else {
				name = string.Format( "{0}'s Lobby", username );
			}
		}
		*/

		GameConfiguration.GameMode = GameMode.LocalCoop2;

		Console.PrintLine( string.Format( "Starting game [map: {0}, gamemode: {1}]...", MultiplayerMapManager.MapCache.Values.ElementAt( MapList.Selected ).Name, GameModeList.Selected ) );
	}

	public override void _Ready() {
		base._Ready();

		MapList = GetNode<OptionButton>( "MarginContainer/VBoxContainer/MapContainer/MapOptionButton" );
		MapList.Connect( OptionButton.SignalName.ItemSelected, Callable.From<int>( OnMapSelectionChanged ) );

		GameModeList = GetNode<OptionButton>( "MarginContainer/VBoxContainer/GameModeContainer/GameModeOptionButton" );

		UIChannel = GetNode<AudioStreamPlayer>( "../../UIChannel" );

		Button startButton = GetNode<Button>( "StartButton" );
		startButton.Connect( Button.SignalName.Pressed, Callable.From( OnStartButtonPressed ) );

		foreach ( var map in MultiplayerMapManager.MapCache ) {
			MapList.AddItem( map.Value.Name );
		}
		for ( int i = 0; i < (int)Mode.GameMode.Count; i++ ) {
			GameModeList.AddItem( Mode.ModeNames[ (Mode.GameMode)i ] );
		}
	}
};
